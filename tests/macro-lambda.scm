(define-macro (smart-define name . args)
   (let*((count (length args))
         (realname (string->symbol (string-append (symbol->string name) "-" (number->string count))))
         (eval (cons 'list args))
         (output `(define ,realname (lambda ,args (apply + ,eval)))))
      (print "  generated name: " realname)
      (print "  a list: " eval)
      (print "  macro result: " output)
      output))
      
(print "declarations:")
(smart-define test a b)
(print)
(smart-define test a b c)

(print "teting:")
(print (test-2 3 8))
(print (test-3 5 6 7))
